diff --git a/.vscode/settings.json b/.vscode/settings.json
new file mode 100644
index 0000000..555f5c4
--- /dev/null
+++ b/.vscode/settings.json
@@ -0,0 +1,15 @@
+{
+    "files.associations": {
+        "defs.h": "c",
+        "riscv.h": "c",
+        "array": "cpp",
+        "bitset": "cpp",
+        "string_view": "cpp",
+        "initializer_list": "cpp",
+        "ranges": "cpp",
+        "span": "cpp",
+        "regex": "cpp",
+        "utility": "cpp",
+        "valarray": "cpp"
+    }
+}
\ No newline at end of file
diff --git a/Makefile b/Makefile
index 39a99d7..3bc22ef 100644
--- a/Makefile
+++ b/Makefile
@@ -132,6 +132,10 @@ UPROGS=\
 	$U/_grind\
 	$U/_wc\
 	$U/_zombie\
+	$U/_thread\
+	$U/_thread2\
+	$U/_thread3\
+
 
 fs.img: mkfs/mkfs README $(UPROGS)
 	mkfs/mkfs fs.img README $(UPROGS)
diff --git a/kernel/defs.h b/kernel/defs.h
index a3c962b..57cddc3 100644
--- a/kernel/defs.h
+++ b/kernel/defs.h
@@ -106,7 +106,12 @@ void            yield(void);
 int             either_copyout(int user_dst, uint64 dst, void *src, uint64 len);
 int             either_copyin(void *dst, int user_src, uint64 src, uint64 len);
 void            procdump(void);
-
+int             thread_create(uint64, uint64, uint64);
+int             thread_join(int );
+void            thread_exit(void);
+void            proc_freepagetable_thread(pagetable_t pagetable, uint64 sz);
+void            release_sleep(uint64 lk);
+void            wakeup_thread(int tid);
 // swtch.S
 void            swtch(struct context*, struct context*);
 
@@ -173,7 +178,10 @@ uint64          walkaddr(pagetable_t, uint64);
 int             copyout(pagetable_t, uint64, char *, uint64);
 int             copyin(pagetable_t, char *, uint64, uint64);
 int             copyinstr(pagetable_t, char *, uint64, uint64);
-
+int             uvmmirror(pagetable_t old, pagetable_t new, uint64 sz);
+void            freewalk(pagetable_t pagetable);
+int             uvmrangemirror(pagetable_t old, pagetable_t new,uint64 start, uint64 sz);
+int             release_lock_user_space(pagetable_t pagetable, uint64 dstva);
 // plic.c
 void            plicinit(void);
 void            plicinithart(void);
diff --git a/kernel/proc.c b/kernel/proc.c
index 959b778..b6d7b6f 100644
--- a/kernel/proc.c
+++ b/kernel/proc.c
@@ -6,6 +6,8 @@
 #include "proc.h"
 #include "defs.h"
 
+struct mem memArray[NPROC];
+
 struct cpu cpus[NCPU];
 
 struct proc proc[NPROC];
@@ -55,6 +57,14 @@ procinit(void)
       initlock(&p->lock, "proc");
       p->state = UNUSED;
       p->kstack = KSTACK((int) (p - proc));
+      p->isThread = 0;
+  }
+
+  struct mem *m;
+  for(m = memArray; m < &memArray[NPROC]; m++) {
+      initlock(&m->lock, "memory");
+      m->memid = -1;
+      m->ref_count = -1;
   }
 }
 
@@ -155,11 +165,19 @@ found:
 static void
 freeproc(struct proc *p)
 {
+  acquire(&p->memptr->lock);
   if(p->trapframe)
     kfree((void*)p->trapframe);
   p->trapframe = 0;
-  if(p->pagetable)
-    proc_freepagetable(p->pagetable, p->sz);
+  if(p->pagetable){
+    if(!p->isThread)
+      proc_freepagetable(p->pagetable, p->sz);
+    else{
+      proc_freepagetable_thread(p->pagetable,p->sz);
+    }
+  }
+  release(&p->memptr->lock);
+
   p->pagetable = 0;
   p->sz = 0;
   p->pid = 0;
@@ -169,6 +187,8 @@ freeproc(struct proc *p)
   p->killed = 0;
   p->xstate = 0;
   p->state = UNUSED;
+  p->isThread = 0;
+  p->memptr = 0;
 }
 
 // Create a user page table for a given process, with no user memory,
@@ -215,6 +235,16 @@ proc_freepagetable(pagetable_t pagetable, uint64 sz)
   uvmfree(pagetable, sz);
 }
 
+void
+proc_freepagetable_thread(pagetable_t pagetable, uint64 sz)
+{
+  uvmunmap(pagetable, TRAMPOLINE, 1, 0);
+  uvmunmap(pagetable, TRAPFRAME, 1, 0);
+  if(sz > 0)
+  uvmunmap(pagetable, 0, PGROUNDUP(sz)/PGSIZE, 0);
+  freewalk(pagetable);
+}
+
 // a user program that calls exec("/init")
 // assembled from ../user/initcode.S
 // od -t xC ../user/initcode
@@ -236,6 +266,10 @@ userinit(void)
 
   p = allocproc();
   initproc = p;
+
+  p->memptr = &memArray[p->pid];
+  p->memptr->memid = p->pid;
+  p->memptr->ref_count = 0;
   
   // allocate one user page and copy initcode's instructions
   // and data into it.
@@ -259,18 +293,45 @@ userinit(void)
 int
 growproc(int n)
 {
-  uint64 sz;
+  uint64 new_sz,old_sz;
   struct proc *p = myproc();
 
-  sz = p->sz;
+  acquire(&p->memptr->lock);
+
+  old_sz = p->sz;
   if(n > 0){
-    if((sz = uvmalloc(p->pagetable, sz, sz + n, PTE_W)) == 0) {
+    if((new_sz = uvmalloc(p->pagetable, old_sz, old_sz + n, PTE_W)) == 0) {
       return -1;
     }
   } else if(n < 0){
-    sz = uvmdealloc(p->pagetable, sz, sz + n);
+    new_sz = uvmdealloc(p->pagetable, old_sz, old_sz + n);
+  }else{
+    release(&p->memptr->lock);
+    return 0;
   }
-  p->sz = sz;
+
+  p->sz = new_sz;
+  struct proc *np;
+
+  for(np = proc; np < &proc[NPROC]; np++){
+    if( np == p )
+      continue;
+    acquire(&np->lock);
+    if( np->memptr != 0 && np->memptr->memid == p->memptr->memid ){
+      if( n > 0 ){
+        uvmrangemirror(p->pagetable,np->pagetable,PGROUNDUP(old_sz),new_sz);
+      }else if( n < 0 ){
+          int npages = (PGROUNDUP(old_sz)-PGROUNDUP(new_sz))/PGSIZE;
+          uvmunmap(np->pagetable, PGROUNDUP(new_sz), npages, 0);
+      }
+      np->sz = new_sz;
+    }
+    release(&np->lock);
+
+  }
+
+  release(&p->memptr->lock);
+
   return 0;
 }
 
@@ -302,6 +363,11 @@ fork(void)
   // Cause fork to return 0 in the child.
   np->trapframe->a0 = 0;
 
+  np->isThread = 0;
+  np->memptr = &memArray[np->pid];
+  np->memptr->memid = np->pid;
+  np->memptr->ref_count = 0;
+
   // increment reference counts on open file descriptors.
   for(i = 0; i < NOFILE; i++)
     if(p->ofile[i])
@@ -561,6 +627,33 @@ sleep(void *chan, struct spinlock *lk)
   acquire(lk);
 }
 
+void
+release_sleep( uint64 lk)
+{
+  struct proc *p = myproc();
+  
+  // Must acquire p->lock in order to
+  // change p->state and then call sched.
+  // Once we hold p->lock, we can be
+  // guaranteed that we won't miss any wakeup
+  // (wakeup locks p->lock),
+  // so it's okay to release lk.
+
+  acquire(&p->lock);  //DOC: sleeplock1
+  if(release_lock_user_space(p->pagetable,lk) < 0)
+      return ;
+
+  // Go to sleep.
+  p->state = SLEEPING;
+
+  sched();
+
+  // Reacquire original lock.
+  release(&p->lock);
+  // acquire(lk);
+  
+}
+
 // Wake up all processes sleeping on chan.
 // Must be called without any p->lock.
 void
@@ -579,6 +672,22 @@ wakeup(void *chan)
   }
 }
 
+void
+wakeup_thread(int tid)
+{
+  struct proc *p;
+
+  for(p = proc; p < &proc[NPROC]; p++) {
+    if(p != myproc()){
+      acquire(&p->lock);
+      if(p->state == SLEEPING && p->pid == tid) {
+        p->state = RUNNABLE;
+      }
+      release(&p->lock);
+    }
+  }
+}
+
 // Kill the process with the given pid.
 // The victim won't exit until it tries to return
 // to user space (see usertrap() in trap.c).
@@ -681,3 +790,119 @@ procdump(void)
     printf("\n");
   }
 }
+
+
+int thread_create(uint64 fcn, uint64 arg, uint64 stack){
+
+  int i, pid;
+  struct proc *np;
+  struct proc *p = myproc();
+
+  // Allocate process.
+  if((np = allocproc()) == 0){
+    return -1;
+  }
+
+  np->isThread = 1;
+  np->memptr = p->memptr;
+  acquire(&p->memptr->lock);
+  np->memptr->ref_count++;
+
+  // Copy user memory from parent to child.
+  if(uvmmirror(p->pagetable, np->pagetable, p->sz) < 0){
+    freeproc(np);
+    release(&np->lock);
+    release(&p->memptr->lock);
+    return -1;
+  }
+  
+  np->sz = p->sz;
+  release(&p->memptr->lock);
+
+  np->trapframe->epc = fcn;
+
+  np->trapframe->sp = stack + PGSIZE;
+  np->trapframe->sp -= np->trapframe->sp % 16; // riscv sp must be 16-byte aligned
+
+  // Cause fork to return 0 in the child.
+  np->trapframe->a0 = arg;
+
+  // uint64 temp = p->trapframe->epc;
+  // if(copyout(np->pagetable,np->trapframe->sp+PGSIZE,(char *)&temp, sizeof(temp)) < 0){
+  //   freeproc(np);
+  //   release(&np->lock);
+  //   return -1;
+  // }
+
+  // increment reference counts on open file descriptors.
+  for(i = 0; i < NOFILE; i++)
+    if(p->ofile[i])
+      np->ofile[i] = filedup(p->ofile[i]);
+  np->cwd = idup(p->cwd);
+
+  safestrcpy(np->name, p->name, sizeof(p->name));
+
+  pid = np->pid;
+
+  release(&np->lock);
+
+  acquire(&wait_lock);
+  np->parent = p;
+  release(&wait_lock);
+
+  acquire(&np->lock);
+  np->state = RUNNABLE;
+  release(&np->lock);
+
+  return pid;
+
+}
+
+int thread_join(int thread_id){
+  struct proc *pp;
+  int havekids, pid;
+  struct proc *p = myproc();
+
+  acquire(&wait_lock);
+
+  for(;;){
+    // Scan through table looking for exited children.
+    havekids = 0;
+    for(pp = proc; pp < &proc[NPROC]; pp++){
+      if(pp->parent == p ){
+        // make sure the child isn't still in exit() or swtch().
+        acquire(&pp->lock);
+
+        if( pp->pid != thread_id){
+          release(&pp->lock);
+          continue;
+        }
+
+        havekids = 1;
+        if(pp->state == ZOMBIE){
+          // Found one.
+          pid = pp->pid;
+          freeproc(pp);
+          release(&pp->lock);
+          release(&wait_lock);
+          return pid;
+        }
+        release(&pp->lock);
+      }
+    }
+
+    // No point waiting if we don't have any children.
+    if(!havekids || killed(p)){
+      release(&wait_lock);
+      return -1;
+    }
+    
+    // Wait for a child to exit.
+    sleep(p, &wait_lock);  //DOC: wait-sleep
+  }
+}
+
+
+void thread_exit(void){
+  exit(0);
+}
\ No newline at end of file
diff --git a/kernel/proc.h b/kernel/proc.h
index d021857..c34cf4c 100644
--- a/kernel/proc.h
+++ b/kernel/proc.h
@@ -26,8 +26,17 @@ struct cpu {
   int intena;                 // Were interrupts enabled before push_off()?
 };
 
+struct mem {
+  struct spinlock lock;
+  int memid;
+  int ref_count;
+};
+
 extern struct cpu cpus[NCPU];
 
+extern struct mem memArray[NPROC];
+
+
 // per-process data for the trap handling code in trampoline.S.
 // sits in a page by itself just under the trampoline page in the
 // user page table. not specially mapped in the kernel page table.
@@ -91,6 +100,8 @@ struct proc {
   int killed;                  // If non-zero, have been killed
   int xstate;                  // Exit status to be returned to parent's wait
   int pid;                     // Process ID
+  int isThread;
+  struct mem* memptr;
 
   // wait_lock must be held when using this:
   struct proc *parent;         // Parent process
@@ -104,4 +115,5 @@ struct proc {
   struct file *ofile[NOFILE];  // Open files
   struct inode *cwd;           // Current directory
   char name[16];               // Process name (debugging)
+
 };
diff --git a/kernel/syscall.c b/kernel/syscall.c
index ed65409..afda555 100644
--- a/kernel/syscall.c
+++ b/kernel/syscall.c
@@ -101,6 +101,11 @@ extern uint64 sys_unlink(void);
 extern uint64 sys_link(void);
 extern uint64 sys_mkdir(void);
 extern uint64 sys_close(void);
+extern uint64 sys_thread_create(void);
+extern uint64 sys_thread_join(void);
+extern uint64 sys_thread_exit(void);
+extern uint64 sys_release_sleep(void);
+extern uint64 sys_wakeup_thread(void);
 
 // An array mapping syscall numbers from syscall.h
 // to the function that handles the system call.
@@ -126,6 +131,11 @@ static uint64 (*syscalls[])(void) = {
 [SYS_link]    sys_link,
 [SYS_mkdir]   sys_mkdir,
 [SYS_close]   sys_close,
+[SYS_thread_create] sys_thread_create,
+[SYS_thread_join] sys_thread_join,
+[SYS_thread_exit] sys_thread_exit,
+[SYS_release_sleep] sys_release_sleep,
+[SYS_wakeup_thread] sys_wakeup_thread,
 };
 
 void
diff --git a/kernel/syscall.h b/kernel/syscall.h
index bc5f356..c160118 100644
--- a/kernel/syscall.h
+++ b/kernel/syscall.h
@@ -20,3 +20,8 @@
 #define SYS_link   19
 #define SYS_mkdir  20
 #define SYS_close  21
+#define SYS_thread_create  22
+#define SYS_thread_join  23
+#define SYS_thread_exit  24
+#define SYS_release_sleep  25
+#define SYS_wakeup_thread 26
diff --git a/kernel/sysproc.c b/kernel/sysproc.c
index 1de184e..85eb55b 100644
--- a/kernel/sysproc.c
+++ b/kernel/sysproc.c
@@ -68,6 +68,24 @@ sys_sleep(void)
   return 0;
 }
 
+uint64
+sys_release_sleep(void)
+{
+  uint64 lk;
+  argaddr(0,&lk);
+  release_sleep(lk);
+  return 0;
+}
+
+uint64
+sys_wakeup_thread(void)
+{
+  int tid;
+  argint(0,&tid);
+  wakeup_thread(tid);
+  return 0;
+}
+
 uint64
 sys_kill(void)
 {
@@ -89,3 +107,31 @@ sys_uptime(void)
   release(&tickslock);
   return xticks;
 }
+
+uint64
+sys_thread_create(void)
+{
+  uint64 fcn,arg,stack;
+  argaddr(0,&fcn);
+  argaddr(1,&arg);
+  argaddr(2,&stack);
+  return thread_create(fcn,arg,stack);
+}
+
+
+uint64
+sys_thread_join(void)
+{
+  int tid;
+  argint(0,&tid);
+  return thread_join(tid);
+}
+
+
+uint64
+sys_thread_exit(void)
+{
+  thread_exit();
+  return 0;
+
+}
diff --git a/kernel/vm.c b/kernel/vm.c
index 9f69783..72d6970 100644
--- a/kernel/vm.c
+++ b/kernel/vm.c
@@ -332,6 +332,56 @@ uvmcopy(pagetable_t old, pagetable_t new, uint64 sz)
   return -1;
 }
 
+int
+uvmmirror(pagetable_t old, pagetable_t new, uint64 sz)
+{
+  pte_t *pte;
+  uint64 pa, i;
+  uint flags;
+
+  for(i = 0; i < sz; i += PGSIZE){
+    if((pte = walk(old, i, 0)) == 0)
+      panic("uvmcopy: pte should exist");
+    if((*pte & PTE_V) == 0)
+      panic("uvmcopy: page not present");
+    pa = PTE2PA(*pte);
+    flags = PTE_FLAGS(*pte);
+    if(mappages(new, i, PGSIZE, pa, flags) != 0){
+      goto err;
+    }
+  }
+  return 0;
+
+ err:
+  uvmunmap(new, 0, i / PGSIZE, 1);
+  return -1;
+}
+
+int
+uvmrangemirror(pagetable_t old, pagetable_t new,uint64 start, uint64 sz)
+{
+  pte_t *pte;
+  uint64 pa, i;
+  uint flags;
+
+  for(i = start; i < sz; i += PGSIZE){
+    if((pte = walk(old, i, 0)) == 0)
+      panic("uvmcopy: pte should exist");
+    if((*pte & PTE_V) == 0)
+      panic("uvmcopy: page not present");
+    pa = PTE2PA(*pte);
+    flags = PTE_FLAGS(*pte);
+    if(mappages(new, i, PGSIZE, pa, flags) != 0){
+      goto err;
+    }
+  }
+  return 0;
+
+ err:
+  uvmunmap(new, 0, i / PGSIZE, 1);
+  return -1;
+}
+
 // mark a PTE invalid for user access.
 // used by exec for the user stack guard page.
 void
@@ -370,6 +420,22 @@ copyout(pagetable_t pagetable, uint64 dstva, char *src, uint64 len)
   return 0;
 }
 
+int
+release_lock_user_space(pagetable_t pagetable, uint64 dstva)
+{
+  uint64 va0, pa0;
+  va0 = PGROUNDDOWN(dstva);
+  pa0 = walkaddr(pagetable, va0);
+  if(pa0 == 0)
+    return -1;
+
+  __sync_synchronize();
+  __sync_lock_release((uint8*)(pa0 + (dstva - va0)));
+  
+  return 0;
+}
+
+
 // Copy from user to kernel.
 // Copy len bytes to dst from virtual address srcva in a given page table.
 // Return 0 on success, -1 on error.
diff --git a/user/lock.h b/user/lock.h
new file mode 100644
index 0000000..ee3438b
--- /dev/null
+++ b/user/lock.h
@@ -0,0 +1,292 @@
+
+struct thread_spinlock{
+    uint8 locked;
+    int thread_id;
+};
+
+int
+holding(struct thread_spinlock *lk,int tid)
+{
+  int r;
+  r = (lk->locked && lk->thread_id == tid);
+  return r;
+}
+
+
+void
+thread_spin_init(struct thread_spinlock *lk)
+{
+  lk->locked = 0;
+  lk->thread_id = -1;
+}
+
+void
+thread_spin_lock(struct thread_spinlock *lk)
+{
+  int tid = getpid();
+
+  if(holding(lk,tid)){
+    printf("spinlock already locked\n");
+    thread_exit();
+  }
+
+  // On RISC-V, sync_lock_test_and_set turns into an atomic swap:
+  //   a5 = 1
+  //   s1 = &lk->locked
+  //   amoswap.w.aq a5, a5, (s1)
+  while(__sync_lock_test_and_set(&lk->locked, 1) != 0)
+    ;
+
+  // Tell the C compiler and the processor to not move loads or stores
+  // past this point, to ensure that the critical section's memory
+  // references happen strictly after the lock is acquired.
+  // On RISC-V, this emits a fence instruction.
+  __sync_synchronize();
+
+  // Record info about lock acquisition for holding() and debugging.
+  lk->thread_id = tid;
+}
+
+// Release the lock.
+void
+thread_spin_unlock(struct thread_spinlock *lk)
+{
+  int tid = getpid();
+
+  if(!holding(lk,tid)){
+    printf("thread not holding the lock\n");
+    thread_exit();
+  }
+
+  lk->thread_id = -1;
+
+  // Tell the C compiler and the CPU to not move loads or stores
+  // past this point, to ensure that all the stores in the critical
+  // section are visible to other CPUs before the lock is released,
+  // and that loads in the critical section occur strictly before
+  // the lock is released.
+  // On RISC-V, this emits a fence instruction.
+  __sync_synchronize();
+
+  // Release the lock, equivalent to lk->locked = 0.
+  // This code doesn't use a C assignment, since the C standard
+  // implies that an assignment might be implemented with
+  // multiple store instructions.
+  // On RISC-V, sync_lock_release turns into an atomic swap:
+  //   s1 = &lk->locked
+  //   amoswap.w zero, zero, (s1)
+  __sync_lock_release(&lk->locked);
+
+}
+
+
+struct thread_mutex{
+    uint8 locked;
+    int thread_id;
+};
+
+void thread_mutex_init(struct thread_mutex *m){
+    m->locked = 0;
+    m->thread_id = -1;
+}
+
+int
+holding2(struct thread_mutex *m,int tid)
+{
+  int r;
+  r = (m->locked && m->thread_id == tid);
+  return r;
+}
+
+
+void thread_mutex_lock(struct thread_mutex *m){
+    int tid = getpid();
+
+    if(holding2(m,tid)){
+        printf("mutex already locked\n");
+        thread_exit();
+    }
+
+    // On RISC-V, sync_lock_test_and_set turns into an atomic swap:
+    //   a5 = 1
+    //   s1 = &m->locked
+    //   amoswap.w.aq a5, a5, (s1)
+    while(__sync_lock_test_and_set(&m->locked, 1) != 0){
+        // printf("going to sleep. tid : %d\n",tid);
+        sleep(1);
+        // printf("woke up from sleep. tid : %d lock : %d\n",tid,m->locked);
+
+    }
+
+    // printf("mutex locked. tid : %d\n",tid);
+
+    // Tell the C compiler and the processor to not move loads or stores
+    // past this point, to ensure that the critical section's memory
+    // references happen strictly after the lock is acquired.
+    // On RISC-V, this emits a fence instruction.
+    __sync_synchronize();
+
+    // Record info about lock acquisition for holding() and debugging.
+    m->thread_id = tid;
+}
+
+void thread_mutex_unlock(struct thread_mutex *m){
+  int tid = getpid();
+
+  if(!holding2(m,tid)){
+    printf("thread not holding the lock\n");
+    thread_exit();
+  }
+
+  m->thread_id = -1;
+
+  // Tell the C compiler and the CPU to not move loads or stores
+  // past this point, to ensure that all the stores in the critical
+  // section are visible to other CPUs before the lock is released,
+  // and that loads in the critical section occur strictly before
+  // the lock is released.
+  // On RISC-V, this emits a fence instruction.
+  __sync_synchronize();
+
+  // Release the lock, equivalent to m->locked = 0.
+  // This code doesn't use a C assignment, since the C standard
+  // implies that an assignment might be implemented with
+  // multiple store instructions.
+  // On RISC-V, sync_lock_release turns into an atomic swap:
+  //   s1 = &m->locked
+  //   amoswap.w zero, zero, (s1)
+  __sync_lock_release(&m->locked);
+}
+
+#define MAXPROC 64
+
+struct queue{
+
+	int arr[MAXPROC];
+	int front;
+	int rear;
+	int size;
+
+};
+
+void queue_init(struct queue* q)
+	{
+		q->front = 0;
+		q->rear = 0;
+		q->size = 0;
+	}
+	void queue_push(int x,struct queue* q)
+	{
+    if( q->size == MAXPROC )
+      return;
+
+		q->arr[q->rear] = x;
+		q->rear = (q->rear+1)%16;
+		q->size++;
+	}
+	int queue_front(struct queue* q)
+	{
+		if(q->size==0)
+			return -1;
+		return q->arr[q->front];
+	}
+	void queue_pop(struct queue* q)
+	{
+    if( q->size == 0 )
+      return ;
+		q->front = (q->front+1)%16;
+		q->size--;
+	}
+
+struct cond {
+    struct queue waitingThreads;
+    struct thread_mutex queue_mutex; /*protects queue */
+};
+
+void thread_cond_init(struct cond* c){
+  queue_init(&c->waitingThreads);
+  thread_mutex_init(&c->queue_mutex);
+}
+
+void thread_cond_wait(struct cond* c,struct thread_mutex *m){
+
+  int tid = getpid();
+
+  thread_mutex_lock(&c->queue_mutex);
+  queue_push(tid,&c->waitingThreads);
+  thread_mutex_unlock(&c->queue_mutex);
+  m->thread_id = -1;
+  release_sleep(&m->locked);
+  thread_mutex_lock(m);
+
+}
+
+void thread_cond_signal(struct cond* c){
+
+  thread_mutex_lock(&c->queue_mutex);
+  int tid = queue_front(&c->waitingThreads);
+  queue_pop(&c->waitingThreads);
+  thread_mutex_unlock(&c->queue_mutex);
+
+  if( tid == -1 )
+    return;
+
+  wakeup_thread(tid);
+
+}
+
+void thread_cond_broadcast(struct cond* c){
+  thread_mutex_lock(&c->queue_mutex);
+
+  while(c->waitingThreads.size != 0){
+    int tid = queue_front(&c->waitingThreads);
+    queue_pop(&c->waitingThreads);
+
+    if( tid == -1 )
+      return;
+
+    wakeup_thread(tid);
+  }
+  
+  thread_mutex_unlock(&c->queue_mutex);
+
+}
+
+
+
+struct thread_sem{
+  int val;
+  struct thread_mutex mlock;
+  struct cond condVal;
+
+};
+
+
+void sem_init(struct thread_sem* sem,int val){
+  sem->val = val;
+  thread_mutex_init(&sem->mlock);
+  thread_cond_init(&sem->condVal);
+}
+
+void sem_wait(struct thread_sem* sem){
+
+  thread_mutex_lock(&sem->mlock);
+
+  while (sem->val == 0)
+  {
+      thread_cond_wait(&sem->condVal, &sem->mlock);
+  }
+
+  --sem->val;
+  thread_mutex_unlock(&sem->mlock);
+
+}
+
+
+void sem_post(struct thread_sem* sem){
+  thread_mutex_lock(&sem->mlock);
+  ++sem->val;
+  thread_mutex_unlock(&sem->mlock);
+
+  thread_cond_signal(&sem->condVal);
+}
\ No newline at end of file
diff --git a/user/printf.c b/user/printf.c
index 5c5c782..2afdcaf 100644
--- a/user/printf.c
+++ b/user/printf.c
@@ -2,6 +2,7 @@
 #include "kernel/stat.h"
 #include "user/user.h"
 
+
 #include <stdarg.h>
 
 static char digits[] = "0123456789ABCDEF";
@@ -110,4 +111,5 @@ printf(const char *fmt, ...)
 
   va_start(ap, fmt);
   vprintf(1, fmt, ap);
+
 }
diff --git a/user/thread.c b/user/thread.c
new file mode 100644
index 0000000..2092fa5
--- /dev/null
+++ b/user/thread.c
@@ -0,0 +1,94 @@
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+#include "user/lock.h"
+
+struct cond binderCond;
+struct thread_spinlock lock;
+struct thread_mutex mlock;
+int freeBinder = 2;
+
+struct thread_mutex plock;
+
+void print(const char* str){
+    thread_mutex_lock(&plock);
+    printf(str);
+    thread_mutex_unlock(&plock);
+
+}
+
+
+struct balance {
+    char name[32];
+    int amount;
+};
+
+volatile int total_balance = 0;
+
+volatile unsigned int delay (unsigned int d) {
+   unsigned int i; 
+   for (i = 0; i < d; i++) {
+       __asm volatile( "nop" ::: );
+   }
+
+   return i;   
+}
+
+void do_work(void *arg){
+    int i; 
+    int old;
+    // thread_spin_lock(&lock);
+    struct balance *b = (struct balance*) arg; 
+    printf( "Starting do_work: s:%s\n", b->name);
+    for (i = 0; i < b->amount; i++) { 
+        // lock and mlock will be implemented by you.
+        //  thread_spin_lock(&lock);
+         thread_mutex_lock(&mlock);
+         old = total_balance;
+         delay(100000);
+	    //  if(old != total_balance)  printf("we will miss an update. old: %d total_balance: %d\n", old, total_balance);
+         total_balance = old + 1;
+        //  thread_spin_unlock(&lock);
+         thread_mutex_unlock(&mlock);
+
+    }
+  
+    printf( "Done s:%s\n", b->name);
+    // thread_spin_unlock(&lock);
+
+    
+    thread_exit();
+    return;
+}
+
+
+
+int main(int argc, char *argv[]) {
+  
+  thread_mutex_init(&mlock);
+  thread_mutex_init(&plock);
+  thread_cond_init(&binderCond);
+   
+  struct balance b1 = {"b1", 3200};
+  struct balance b2 = {"b2", 2800};
+ 
+  void *s1, *s2;
+  int thread1, thread2, r1, r2;
+
+  s1 = malloc(4096); // 4096 is the PGSIZE defined in kernel/riscv.h
+  s2 = malloc(4096);
+ 
+
+
+  thread1 = thread_create(do_work, (void*)&b1, s1);
+  thread2 = thread_create(do_work, (void*)&b2, s2); 
+
+  r1 = thread_join(thread1);
+  r2 = thread_join(thread2);
+  
+  printf("Threads finished: (%d):%d, (%d):%d, shared balance:%d\n", 
+      thread1, r1, thread2, r2, total_balance);
+
+  return 1;
+
+}
\ No newline at end of file
diff --git a/user/thread2.c b/user/thread2.c
new file mode 100644
index 0000000..f50a7a8
--- /dev/null
+++ b/user/thread2.c
@@ -0,0 +1,137 @@
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+#include "user/lock.h"
+
+struct cond binderCond;
+struct thread_spinlock lock;
+struct thread_mutex mlock;
+int freeBinder = 2;
+
+struct thread_sem sem;
+
+struct thread_mutex plock;
+
+void print(const char* str){
+    thread_mutex_lock(&plock);
+    printf(str);
+    thread_mutex_unlock(&plock);
+
+}
+
+
+struct balance {
+    char name[32];
+    int amount;
+};
+
+volatile int total_balance = 0;
+
+volatile unsigned int delay (unsigned int d) {
+   unsigned int i; 
+   for (i = 0; i < d; i++) {
+       __asm volatile( "nop" ::: );
+   }
+
+   return i;   
+}
+
+void do_work(void *arg){
+    // int i; 
+    // int old;
+    // // thread_spin_lock(&lock);
+    // struct balance *b = (struct balance*) arg; 
+    // printf( "Starting do_work: s:%s\n", b->name);
+    // for (i = 0; i < b->amount; i++) { 
+    //     // lock and mlock will be implemented by you.
+    //     //  thread_spin_lock(&lock);
+    //      thread_mutex_lock(&mlock);
+    //      old = total_balance;
+    //      delay(100000);
+	//     //  if(old != total_balance)  printf("we will miss an update. old: %d total_balance: %d\n", old, total_balance);
+    //      total_balance = old + 1;
+    //     //  thread_spin_unlock(&lock);
+    //      thread_mutex_unlock(&mlock);
+
+    // }
+  
+    // printf( "Done s:%s\n", b->name);
+    // // thread_spin_unlock(&lock);
+
+
+    // thread_mutex_lock(&mlock);
+
+    // while (freeBinder == 0)
+    // {
+    //     print("waiting on binder\n");
+    //     thread_cond_wait(&binderCond, &mlock);
+    // }
+
+    // freeBinder--;
+    // thread_mutex_unlock(&mlock);
+
+    // print("got binder\n");
+    // sleep(50);
+
+    // thread_mutex_lock(&mlock);
+    // freeBinder++;
+    // thread_mutex_unlock(&mlock);
+
+    // thread_cond_signal(&binderCond);
+
+    print("waiting \n");
+
+    sem_wait(&sem);
+
+    print("got binder\n");
+    sleep(50);
+
+    sem_post(&sem);
+
+    
+    thread_exit();
+    return;
+}
+
+
+
+int main(int argc, char *argv[]) {
+  
+  thread_mutex_init(&mlock);
+  thread_mutex_init(&plock);
+  thread_cond_init(&binderCond);
+
+  sem_init(&sem,2);
+   
+  struct balance b1 = {"b1", 3200};
+  struct balance b2 = {"b2", 2800};
+ 
+  void *s1, *s2,*s3,*s4;
+  int thread1, thread2, r1, r2;
+  int thread3,thread4;
+
+  s1 = malloc(4096); // 4096 is the PGSIZE defined in kernel/riscv.h
+  s2 = malloc(4096);
+  s3 = malloc(4096);
+  s4 = malloc(4096);
+
+
+  thread1 = thread_create(do_work, (void*)&b1, s1);
+  thread2 = thread_create(do_work, (void*)&b2, s2); 
+  thread3 = thread_create(do_work, (void*)&b2, s3); 
+  thread4 = thread_create(do_work, (void*)&b2, s4); 
+
+
+  r1 = thread_join(thread1);
+  r2 = thread_join(thread2);
+  thread_join(thread3);
+  thread_join(thread4);
+  
+  printf("Threads finished: (%d):%d, (%d):%d, shared balance:%d\n", 
+      thread1, r1, thread2, r2, total_balance);
+
+
+
+  return 1;
+
+}
\ No newline at end of file
diff --git a/user/thread3.c b/user/thread3.c
new file mode 100644
index 0000000..e614885
--- /dev/null
+++ b/user/thread3.c
@@ -0,0 +1,103 @@
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+#include "user/lock.h"
+
+
+struct queue q;
+// a mutex object lock 
+// a semaphore object empty
+// a semaphore object full
+struct thread_mutex mlock;
+struct thread_sem empty;
+struct thread_sem full;
+
+
+void init_semaphore()
+{
+	// initialize mutex lock
+	// initialize semaphore empty with 5
+	// initialize semaphore full with 0
+    thread_mutex_init(&mlock);
+    sem_init(&empty,5);
+    sem_init(&full,0);
+
+}
+
+void ProducerFunc(void * arg)
+{	
+	printf("%s\n",(char*)arg);
+	int i;
+	for(i=1;i<=10;i++)
+	{
+		// wait for semphore empty
+        sem_wait(&empty);
+		// wait for mutex lock
+        thread_mutex_lock(&mlock);
+		sleep(1);	
+		queue_push(i,&q);
+		printf("producer produced item %d\n",i);
+		
+		// unlock mutex lock
+        thread_mutex_unlock(&mlock);
+
+		// post semaphore full
+        sem_post(&full);
+		sleep(1);
+	}
+
+    thread_exit();
+
+}
+
+void ConsumerFunc(void * arg)
+{
+	printf("%s\n",(char*)arg);
+	int i;
+	for(i=1;i<=10;i++)
+	{	
+		// wait for semphore full
+		// wait for mutex lock
+        sem_wait(&full);
+        thread_mutex_lock(&mlock);
+ 	
+		sleep(1);
+		int item = queue_front(&q);
+		queue_pop(&q);
+		printf("consumer consumed item %d\n",item);	
+
+
+		// unlock mutex lock
+		// post semaphore empty		
+        thread_mutex_unlock(&mlock);
+        sem_post(&empty);
+		sleep(1);
+
+	}
+
+    thread_exit();
+}
+
+int main(void)
+{	
+	
+	init_semaphore();
+	
+	char * message1 = "i am producer";
+	char * message2 = "i am consumer";
+
+
+	void *s1, *s2;
+  	int thread1, thread2;
+
+  	s1 = malloc(4096);
+  	s2 = malloc(4096);
+
+  	thread1 = thread_create(ProducerFunc, (void*)message1, s1);
+  	thread2 = thread_create(ConsumerFunc, (void*)message2, s2); 
+
+  	thread_join(thread1);
+  	thread_join(thread2);	
+	
+	exit(0);
+}
diff --git a/user/user.h b/user/user.h
index 4d398d5..bd17286 100644
--- a/user/user.h
+++ b/user/user.h
@@ -1,3 +1,4 @@
+
 struct stat;
 
 // system calls
@@ -22,6 +23,11 @@ int getpid(void);
 char* sbrk(int);
 int sleep(int);
 int uptime(void);
+int thread_create(void(*)(void*), void *, void*);
+int thread_join(int);
+void thread_exit(void);
+int release_sleep(uint8*);
+void wakeup_thread(int);
 
 // ulib.c
 int stat(const char*, struct stat*);
diff --git a/user/usys.pl b/user/usys.pl
index 01e426e..8696b06 100755
--- a/user/usys.pl
+++ b/user/usys.pl
@@ -36,3 +36,10 @@ entry("getpid");
 entry("sbrk");
 entry("sleep");
 entry("uptime");
+entry("thread_create");
+entry("thread_join");
+entry("thread_exit");
+entry("release_sleep");
+entry("wakeup_thread");
+
+
